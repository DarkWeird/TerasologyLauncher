/*
 * Copyright 2020 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Uses Bellsoft Liberica JRE
def jreVersionGame = '8u212'
def jdkVersionLauncher = '11.0.6+10' // jre version haven't jmod (needed for jlink/jpackager)

def jreUrlFilenames = [
        Linux64  : 'linux-amd64.tar.gz',
        Linux32  : 'linux-i586.tar.gz',
        Windows64: 'windows-amd64.zip',
        Windows32: 'windows-i586.zip',
        Mac      : 'macos-amd64.zip'
]

task createRelease() {
    group 'Distribution'
    description 'Bundles the project with a JRE for each platform'
    dependsOn distZip

    doLast {
        println 'Created release: ' + displayVersion
    }
}

task downloadJreAll {
    group 'Download'
    description 'Downloads JRE for all platforms'
    dependsOn downloadJreGame, downloadJreLauncher
}

task downloadJreGame {
    group 'Download'
    description 'Downloads Game JRE for all platforms'
}

task downloadJreLauncher {
    group 'Download'
    description 'Downloads Launcher JRE for all platforms'
}

def createJreTasks(String taskNameBase,
                   String downloadUrl,
                   String downloadFile,
                   String unpackDir) {

    task "download$taskNameBase"(type: Download) {
        group 'Download'
        src downloadUrl
        dest downloadFile
        overwrite false
    }

    task "unpack$taskNameBase"(type: Copy) {
        from(file.endsWith("zip")
                ? zipTree(packedJre)
                : tarTree(packedJre)) {
            eachFile { fcd ->
                fcd.relativePath = new RelativePath(
                        true, fcd.relativePath.segments.drop(1))
            }
            includeEmptyDirs = false
        }
        into unpackDir

        outputs.dir unpackDir

        dependsOn "download${taskNameBase}"
    }
}

jreUrlFilenames.each { os, file ->
    // JRE 8
    def gameTaskBase = "Jre${os}Game"
    createJreTasks(
            gameTaskBase,
            "https://download.bell-sw.com/java/$jreVersionGame/bellsoft-jre$jreVersionGame-$file",
            "$projectDir/jre/$os-$jreVersionGame-$file",
            "$projectDir/jre/Game/$os")

    downloadJreGame.dependsOn "unpack${gameTaskBase}"

    // JDK 11
    def launcherTaskBase = "Jre${os}Launcher"
    createJreTasks(
            launcherTaskBase,
            "https://download.bell-sw.com/java/$jdkVersionLauncher/bellsoft-jdk$jdkVersionLauncher-$file",
            "$projectDir/jre/$os-$jdkVersionLauncher-$file",
            "$projectDir/jre/Launcher/$os")
    downloadJreLauncher.dependsOn "unpack${launcherTaskBase}"
}

jreUrlFilenames.each { os, file ->
    def distName = os.toLowerCase()
    
    distributions {
        "$distName" {
            contents {
                from "unpackJre${os}Launcher"
                into 'jre'
                with distributions.main.contents
            }
        }
    }

    def zipTask = tasks.named("${distName}DistZip").get()
    def tarTask = tasks.named("${distName}DistTar").get()

    zipTask.dependsOn downloadJreAll
    zipTask.description "Bundles the project with a JRE for ${os}"
    tarTask.dependsOn downloadJreAll
    tarTask.description "Bundles the project with a JRE for ${os}"
    createRelease.dependsOn zipTask
}